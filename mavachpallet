<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="utf-8">
  <title>T·∫°o M√£ QR PALLET</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.jsdelivr.net/npm/easyqrcodejs/dist/easy.qrcode.min.js"></script>
  <script src="https://cdn.emailjs.com/sdk/2.3.2/email.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/UAParser.js/0.7.28/ua-parser.min.js"></script>
  <style>
    body { font-family: Arial; background: #f9f9f9; padding: 20px; }
    h1, h2 { text-align: center; color: #333; }
    textarea, input {
      width: 100%; padding: 10px; margin: 10px 0;
      font-size: 16px; border: 1px solid #ddd; border-radius: 5px;
    }
    button {
      padding: 10px 20px; margin: 10px 5px;
      font-size: 16px; border: none; border-radius: 5px;
      cursor: pointer; color: white;
    }
    .create-btn { background: #FFD700; color: black; font-weight: bold; }
    .delete-btn { background: #f44336; }
    .pdf-btn { background: #0078D7; }
    .camera-btn {
      background: #28a745; color: white; font-weight: bold;
      padding: 10px 20px; border-radius: 5px;
    }
    table {
      width: 100%; border-collapse: collapse;
      margin-top: 20px; background: #f2f2f2;
    }
    th, td { border: 1px solid black; padding: 10px; text-align: center; }
    canvas { max-width: 100px; }
    
    #datetime-container {
        text-align: center;
        margin-top: 20px;
        font-size: 20px;
        font-family: Arial, sans-serif;
    }
    
    
  </style>
</head>
<body>
  <center>
    <div id="login">
      <h2>Vui l√≤ng nh·∫≠p m√£ nh√¢n vi√™n ƒë·ªÉ ti·∫øp t·ª•c</h2>
      <input type="password" id="passwordInput" placeholder="Nh·∫≠p m√£ nh√¢n vi√™n v√† nh·∫•n Enter" autofocus />
      <button onclick="validatePasswordInput()" style="background-color:#ff9800;">‚úÖ X√ÅC NH·∫¨N</button>
      <p id="deviceInfo"></p>
      <p id="ipInfo"></p>
    </div>
  </center>
  <CENTER><h1><p id="userNameDisplay" style="margin-top: 10px; font-weight: bold;"></p></h1></CENTER>

  <div id="datetime-container">
    <div id="time"></div>
    <div id="today"></div>
</div>
 
  <div id="mainContent" style="display:none;">
    <h2>Nh·∫≠p D·ªØ Li·ªáu ƒê·ªÉ T·∫°o M√£ (M·∫∑c ƒë·ªãnh t·∫°o 35 m√£ m·ªói d√≤ng)</h2>
    <h3 id="today"></h3>
    <h1 id="time"></h1>

    <div style="text-align:center;">
      <button class="camera-btn" onclick="reopenCamera()">üì∑ M·ªû CAMERA QU√âT QRCODE</button>
    </div>
    <div id="reader" style="margin: 10px auto;"></div>
    <p id="result" style="text-align: center; color: green;"></p>

    <textarea id="inputData" placeholder="Nh·∫≠p d·ªØ li·ªáu CON TEM ·ªü ƒë√¢y..." rows="4"></textarea>
    <input type="number" id="soLuong" placeholder="S·ªë l∆∞·ª£ng m√£ QR m·ªói d√≤ng (m·∫∑c ƒë·ªãnh 35)" />

    <div style="text-align: center;">
      <button class="create-btn" onclick="submitFormAndCreateQR()">T·∫°o M√£ QR H√†ng Lo·∫°t</button>
      <button class="delete-btn" onclick="deleteAllQR()">X√≥a T·∫•t C·∫£ M√£ QR</button>
      <button class="pdf-btn" onclick="exportToPDF()">Xu·∫•t File PDF</button>
    </div>

    <table id="tableQRCode">
      <tr>
        <th>D·ªØ Li·ªáu</th>
        <th>M√£ QR</th>
        <th>X√≥a</th>
      </tr>
    </table>
  </div>

  <script>
    emailjs.init("8SnMBJSZe0TS-VPA1");
    let globalPassword = '', allData = [], qrScanner, timer, isQRCodeScanned = false;
let userName = "";
   const employeeMap = {
      "H00770": "TR√Ä THANH CHUNG",
      "H01086": "TR·∫¶N TH·ªä M·ªòNG NHI",
      "H01357": "ƒê√ÄO NG·ªåC THU·∫¨N",
      "H01535": "CH√ÇU VƒÇN KI√äN",
      "H04313": "V√ï TH·ªä L·∫†NH",
      "H04890": "HU·ª≤NH TH·ªä THU·ª≤ D∆Ø∆†NG",
      "H07128": "NGUY·ªÑN THANH NH√É",
      "H07774": "HU·ª≤NH MINH T√ÇM",
      "H15245": "LAI THI√äN",
      "H17561": "L√ä VƒÇN KH·ªûI",
      "H19938": "PH·∫†M C√îNG ƒê·∫†I",
      "H20128": "CAO T·∫§N T·ªöI",
      "H20414": "H·ªí TH·ªä THANH TH√öY",
      "H20673": "NGUY·ªÑN MINH SANG",
      "H23431": "CH√ÇU RI NA",
      "H24103": "NGUY·ªÑN VƒÇN RO",
      "H27273": "NGUY√äÃÉN THIÃ£ Y√äÃÅN NHI",
      "H27628": "HU·ª≤NH NG·ªåC ƒêI·ªÜP",
      "H27670": "NG√î MINH CH√ÇU",
      "H27862": "HU·ª≤NH NG·ªåC TH·∫ÆNG",
      "H28576": "NGUY√äÃÉN CHIÃÅ PH∆Ø∆†NG",
      "H29944": "KIM NG·ªåC L∆Ø·ª¢NG",
      "H30108": "V√ï T·∫§N L·ª¢I",
      "H30338": "NGUY·ªÑN H·ªÆU NGHƒ®A",
      "H30422": "NGUY·ªÑN MINH QUANG",
      "H30828": "TR∆Ø∆†NG H·ªÆU ƒê·ª®C",
      "H30829": "NGUY·ªÑN PH∆Ø·ªöC DINH",
      "H31015": "HU·ª≤NH VƒÇN NINH",
      "H31376": "TR·∫¶N ƒêAN TR∆Ø·ªúNG",
      "H31395": "NGUY·ªÑN CH√ç CAO",
      "H32184": "NGUY·ªÑN H·ªÆU L·ª¢I",
      "H32893": "PHAN CH√ç T√ÇM",
      "H32935": "L√ä TR·∫¶N C·∫®M TI√äN",
      "H33308": "CH√ÇU QU√ç M·∫¢O",
      "H33697": "CH√ÇU THANH T√çNH",
      "H33769": "ƒê√ÄO DUY TU·∫§N",
      "H33784": "NGUY·ªÑN TH·ªä B√â H·∫æN",
      "H33857": "TR·∫¶N TH·∫æ NAM",
      "H33888": "H·ªí HO√ÄNG KHANG",
      "H33985": "B√ôI THANH NAM",
      "H34349": "TR·∫¶N MINH TR√ç",
  "H34376": "L√ä MINH TR∆Ø·ªúNG",
  "H34504": "V√ï GIA KH√ÅNH",
  "H34747": "HU·ª≤NH C√îNG B·∫¢O",
  "H34855": "PH·∫†M T·∫§N ƒê√î",
  "H35364": "NGUY·ªÑN VƒÇN ƒê√ÅNG",
  "H35610": "PHAN QU·ªêC KH√ÅNH",
  "H36043": "NGUY·ªÑN ƒêƒÇNG KHOA",
  "H36175": "PH·∫†M TH·ªä LAN H∆Ø∆†NG",
  "H36652": "L√ä MINH TUY·∫æN",
  "H32055": "HU·ª≤NH GIANG",
  "H33431": "ƒê·∫∂NG H·ªíNG Dƒ®",
  "H36495": "PH·∫†M KH·∫ÆC QUI",
  "H36992": "L√ÇM NG·ªåC T∆Ø·ªúNG VY",
  "H37024": "NGUY·ªÑN MINH THU·∫¨N"
    };
function validatePasswordInput() {
  const input = document.getElementById("passwordInput").value.trim();
  if (employeeMap.hasOwnProperty(input)) {
    document.getElementById('mainContent').style.display = 'block';
    document.getElementById('login').style.display = 'none';
    globalPassword = input;

    // N·∫øu mu·ªën hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p:
    const userName = employeeMap[input] || "Kh√¥ng r√µ t√™n";
    document.getElementById("userNameDisplay").innerText = `Xin ch√†o: ${userName} `;

  } else {
    alert("M√£ kh√¥ng ƒë√∫ng . Vui l√≤ng th·ª≠ l·∫°i!");
  }
}

  function submitFormAndCreateQR() {
    const inputData = document.getElementById('inputData').value;
    const soLuong = document.getElementById('soLuong').value || 35;
    const dataArray = inputData.split('\n');
    const table = document.getElementById('tableQRCode');

    allData = []; // Reset tr∆∞·ªõc khi th√™m m·ªõi

    dataArray.forEach(baseData => {
      if (baseData.trim() !== '') {
        for (let j = 1; j <= soLuong; j++) {
          const data = baseData.replace(/_\d+_/, `_${j}_`);
          allData.push(data);
          const row = table.insertRow();
          const cellData = row.insertCell(0);
          const cellQRCode = row.insertCell(1);
          const cellDelete = row.insertCell(2);
          cellData.textContent = data;
          new QRCode(cellQRCode, {
            text: data, width: 100, height: 100,
            colorDark: "#000", colorLight: "#fff",
            correctLevel: QRCode.CorrectLevel.H
          });
          const deleteBtn = document.createElement('button');
          deleteBtn.className = 'delete-btn'; deleteBtn.textContent = 'X√≥a';
          deleteBtn.onclick = () => row.remove();
          cellDelete.appendChild(deleteBtn);
        }
      }
    });

    document.getElementById('inputData').value = '';

    // L·∫•y th√¥ng tin thi·∫øt b·ªã
    const parser = new UAParser();
    const result = parser.getResult();
    const deviceInfo = {
      browser: result.browser.name + " " + result.browser.version,
      screen: window.screen.width + "x" + window.screen.height,
      language: navigator.language,
      platform: navigator.platform,
      time: new Date().toLocaleString()
    };

    // G·ª≠i email qua EmailJS
    emailjs.send("service_2oqzpt5", "template_dn3j21p", {
      message: allData.join('\n'),
      quantity: soLuong,
      messagePASS: globalPassword,
        password: globalPassword,
      userName: userName,
      user_browser: deviceInfo.browser,
      user_screen: deviceInfo.screen,
      user_language: deviceInfo.language,
      user_platform: deviceInfo.platform,
      access_time: deviceInfo.time
    });
  }

  function deleteAllQR() {
    const table = document.getElementById('tableQRCode');
    while (table.rows.length > 1) table.deleteRow(1);
  }

  function exportToPDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    const table = document.getElementById('tableQRCode');
    let y = 20;
    doc.text("D·ªØ li·ªáu v√† m√£ QR", 10, 10);
    for (let i = 1; i < table.rows.length; i++) {
      const text = table.rows[i].cells[0].innerText;
      doc.text(text, 10, y);
      const canvas = table.rows[i].cells[1].querySelector('canvas');
      if (canvas) {
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, 'PNG', 60, y - 10, 30, 30);
      }
      y += 40;
      if (y > 260) { doc.addPage(); y = 20; }
    }
    doc.save("MAVACHPALLET.pdf");
  }

  function updateTime() {
    const now = new Date();
    const time = now.toLocaleTimeString();
    document.getElementById('time').textContent = time;
    const days = ["Ch·ªß nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"];
    const today = `${days[now.getDay()]}, ng√†y ${now.getDate()} th√°ng ${now.getMonth() + 1} nƒÉm ${now.getFullYear()}`;
    document.getElementById('today').textContent = `H√¥m Nay : ${today}`;
  }

  function reopenCamera() {
    const qrRegion = document.getElementById("reader");
    qrRegion.innerHTML = "";
    qrScanner = new Html5Qrcode("reader");
    qrScanner.start(
      { facingMode: "environment" },
      { fps: 10, qrbox: 250 },
      qrCodeMessage => {
        if (!isQRCodeScanned) {
          isQRCodeScanned = true;
          document.getElementById("inputData").value += qrCodeMessage + "\n";
          document.getElementById("result").textContent = "‚úÖ ƒê√£ qu√©t: " + qrCodeMessage;
          clearTimeout(timer);
          qrScanner.stop();
          setTimeout(() => {
            if (document.getElementById("inputData").value.trim() !== '') {
              submitFormAndCreateQR();
            }
          }, 10000);
        }
      },
      error => console.warn("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c m√£: ", error)
    ).catch(err => {
      console.error("Kh√¥ng th·ªÉ m·ªü camera: ", err);
      document.getElementById("result").textContent = "‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü camera.";
    });
    timer = setTimeout(() => {
      if (!isQRCodeScanned) {
        qrScanner.stop();
        document.getElementById("result").textContent = "‚ö†Ô∏è Camera ƒë√£ t·∫Øt....";
      }
    }, 10000);
  }

  window.onload = function () {
    updateTime();
    setInterval(updateTime, 1000);
    let typingTimer;
    const inputArea = document.getElementById('inputData');
    inputArea.addEventListener('input', () => {
      clearTimeout(typingTimer);
      typingTimer = setTimeout(() => {
        if (inputArea.value.trim() !== '') submitFormAndCreateQR();
      }, 10000);
    });
  }
  </script>
</body>
</html>
